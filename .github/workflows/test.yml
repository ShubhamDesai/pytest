name: test

on:
  push:
    branches:
      - main
      - "[0-9]+.[0-9]+.x"
      - "test-me-*"
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+rc[0-9]+"
  pull_request:
    branches:
      - main
      - "[0-9]+.[0-9]+.x"
    types: [opened, synchronize, reopened, ready_for_review]

env:
  PYTEST_ADDOPTS: "--color=yes"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  actions: read

jobs:
  run-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        name: ["windows-py39-unittestextras", "windows-py39-pluggy", "windows-py39-xdist", "windows-py310", "windows-py311", "windows-py312", "windows-py313"]
        include:
          - name: "windows-py39-unittestextras"
            python: "3.9"
            os: windows-latest
            tox_env: "py39-unittestextras"
          - name: "windows-py39-pluggy"
            python: "3.9"
            os: windows-latest
            tox_env: "py39-pluggymain-pylib-xdist"
          - name: "windows-py39-xdist"
            python: "3.9"
            os: windows-latest
            tox_env: "py39-xdist"
          - name: "windows-py310"
            python: "3.10"
            os: windows-latest
            tox_env: "py310-xdist"
          - name: "windows-py311"
            python: "3.11"
            os: windows-latest
            tox_env: "py311"
          - name: "windows-py312"
            python: "3.12"
            os: windows-latest
            tox_env: "py312"
          - name: "windows-py313"
            python: "3.13"
            os: windows-latest
            tox_env: "py313"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install tox pytest-json-report jq

      - name: Set workflow ID
        run: echo "WORKFLOW_ID=${{ matrix.name }}" >> $GITHUB_ENV

      - name: Set PR ID
        run: echo "PR_ID=${{ github.event.number || 'main' }}" >> $GITHUB_ENV

      - name: Retrieve artifacts (if any)
        run: |
          mkdir -p artifacts/pr-${PR_ID}/${WORKFLOW_ID}
          python scripts/retrieve_artifacts.py --pr-id $PR_ID --workflow-id $WORKFLOW_ID

      - name: Collect all test cases
        run: |
          tox -e ${{ matrix.tox_env }} -- --collect-only --quiet | grep "::" > artifacts/pr-${PR_ID}/${WORKFLOW_ID}/all_tests.txt || true

      - name: Extract previously failed tests
        run: |
          python scripts/extract_failed_tests.py --pr-id $PR_ID --workflow-id $WORKFLOW_ID

      - name: Generate failed rerun script
        run: |
          python scripts/generate_pytest_commands.py \
            --input artifacts/pr-${PR_ID}/${WORKFLOW_ID}/failed_tests.txt \
            --output-dir artifacts/pr-${PR_ID}/${WORKFLOW_ID} \
            --pr-id ${PR_ID} \
            --workflow-id ${WORKFLOW_ID} \
            --generate-script \
            --batch-size 50 \
            --tox-env ${{ matrix.tox_env }} \
            --prefix failed

      - name: Run failed tests
        run: |
          if [[ -f artifacts/pr-${PR_ID}/${WORKFLOW_ID}/run_failed_tests.sh ]]; then
            chmod +x artifacts/pr-${PR_ID}/${WORKFLOW_ID}/run_failed_tests.sh
            bash artifacts/pr-${PR_ID}/${WORKFLOW_ID}/run_failed_tests.sh
          else
            echo "No failed test script found."
          fi

      - name: Check if any tests failed again
        run: |
          jq -r '.tests | map(select(.outcome == "failed")) | .[].nodeid' artifacts/pr-${PR_ID}/${WORKFLOW_ID}/test_results.json > artifacts/pr-${PR_ID}/${WORKFLOW_ID}/failed_again.txt || true

      - name: Run remaining tests if no failures
        if: success()
        run: |
          grep -vxFf artifacts/pr-${PR_ID}/${WORKFLOW_ID}/failed_again.txt artifacts/pr-${PR_ID}/${WORKFLOW_ID}/all_tests.txt > artifacts/pr-${PR_ID}/${WORKFLOW_ID}/remaining_tests.txt || true
          python scripts/generate_pytest_commands.py \
            --input artifacts/pr-${PR_ID}/${WORKFLOW_ID}/remaining_tests.txt \
            --output-dir artifacts/pr-${PR_ID}/${WORKFLOW_ID} \
            --pr-id ${PR_ID} \
            --workflow-id ${WORKFLOW_ID} \
            --generate-script \
            --batch-size 50 \
            --tox-env ${{ matrix.tox_env }}
          if [[ -f artifacts/pr-${PR_ID}/${WORKFLOW_ID}/run_tests.sh ]]; then
            chmod +x artifacts/pr-${PR_ID}/${WORKFLOW_ID}/run_tests.sh
            bash artifacts/pr-${PR_ID}/${WORKFLOW_ID}/run_tests.sh
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: pr-${{ env.PR_ID }}-${{ env.WORKFLOW_ID }}-test-results
          path: artifacts/pr-${{ env.PR_ID }}/${{ env.WORKFLOW_ID }}/

  retrieve-results:
    needs: run-tests
    runs-on: ubuntu-latest
    steps:
      - name: Set PR ID
        run: echo "PR_ID=${{ github.event.number || 'main' }}" >> $GITHUB_ENV

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: pr-${{ env.PR_ID }}-*-test-results
          path: retrieved-results

      - name: Combine results
        run: |
          python scripts/combine_results.py --input-dir retrieved-results --output retrieved-results/combined_results.json

      - name: Upload combined results
        uses: actions/upload-artifact@v4
        with:
          name: pr-${{ env.PR_ID }}-combined-test-results
          path: retrieved-results/combined_results.json
